@page "/login"
@namespace LoginComponent
@using AssignmentDNP2.Authentication

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@*
<AuthorizeView>
    <NotAuthorized>
        <div class="card-header">
            <label>User name:</label>
            <input type="text" placeholder="user name" @bind-value="username"/>
        </div>
        <div class="card-header">
            <label> Password: </label>
            <input type="password" placeholder="password" @bind-value="password"/>
        </div>
        <div style="color:red">@errorMessage</div>

        <a href="" @onclick="PerformLogin">
            Login
        </a>
    </NotAuthorized>
 
</AuthorizeView>
*@




<div class="card">
<h4 class="card-header">Login</h4>
    <div class="card-body">
        

            <div class="form-group">
<label>Username</label>
<input type="text" placeholder="user name" @bind-value="username"/>
            </div>

<div class="form-group">
                <label>Password</label>
                <input type="password" placeholder="password" @bind-value="password"/>
            </div>
 <a href="" @onclick="PerformLogin">
             Login
         </a>
    </div>
</div>




@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin() {
        errorMessage = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
        } catch (Exception e) {
            errorMessage = e.Message;
        }
    }

    /*
    public async Task PerformLogout() {
        errorMessage = "";
        username = "";
        password = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        } catch (Exception e) { }
    }
    */

}